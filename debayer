#!/usr/bin/env python3
from __future__ import with_statement

import os
import sys
import argparse
import re
import shutil
import time
import datetime
import logging
import subprocess
import shlex
import distutils.spawn

''' -----------------------------------
    CONFIGURATION
'''

# location of rawtherapee-cli
RT_BIN = '/usr/bin/rawtherapee-cli'
# location of oiiotool
OIIO_BIN = '/usr/bin/oiiotool'

DIR_PATH = os.path.dirname(os.path.realpath(__file__))

# Cache directory for temp files
CACHE_DIR = '/var/tmp/rt'

# Default rawtherapee config file to use
RT_DEFAULT_PROFILE = os.path.join(DIR_PATH, 'lin_ap1.pp3')


# Use dcraw for debayer instead of rawtherapee
USE_DCRAW = False
# location of dcraw_emu from LibRaw
DCRAW_BIN = '/usr/bin/dcraw_emu'

# Apply 3x3 color gamut conversion matrix
USE_MATRIX = False
mtx_XYZ_to_ACEScg = '1.65885437,-0.31185693,-0.24315603,-0.66228336,1.61220002,0.01585913,0.01148057,-0.00923633,0.91668653'
mtx_ACES_to_ACEScg = '1.45143926,-0.23651077,-0.21492854,-0.07655376,1.17622995,-0.09967593,0.00831615,-0.00603245,0.99771643'
OIIO_MATRIX = mtx_ACES_to_ACEScg

# exr file compression: "none", "zip", "rle", "zips", "piz", "pxr24", "b44", "b44a", "dwaa:45", "dwab:45"
EXR_COMPRESSION = 'dwaa:45'

# Default raw to scene-linear exposure
DEFAULT_EXPOSURE = '4.0'

# oiiotool resize filter
# # "box", "triangle", "gaussian", "sharp-gaussian", "catmull-rom", "blackman-harris", "sinc", "lanczos3", "mitchell", "bspline", "cubic", "keys", "simon", "rifman"
RESIZE_FILTER = 'blackman-harris'

# Supported raw file extensions (uppercase automatically added)
RAW_FILE_FORMATS = ["crw", "cr2", "cr3", "dng", "nef", "nrw", "arw", "bay", 
    "cap", "iiq", "eip", "dcs", "dcr", "drf", "kdc", "erf", "fff", "mef", 
    "mdc", "mos", "mrw", "orf", "pef", "ptx", "raf", "raw", "rw2", "rwl", "srw", "x3f"]

''' -----------------------------------
'''

# Set up logger # %(levelname)s %(asctime)s
logging.basicConfig(
    level=logging.DEBUG,
    format='%(message)s',
    handlers=[logging.StreamHandler(sys.stdout)])
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)


class Debayer():

    def __init__(self):
        '''
        Validate everything necessary to begin work:
            - Gather settings from the config file
            - Gather commandline arguments
            - Verify everything we need exists
            - Gather all inpput images
        '''

        # Get commandline arguments
        parser = argparse.ArgumentParser(
                            description="Debayer is a commandline tool to convert camera raw images into scene-linear exr.")
        
        parser.add_argument("input_paths",
                            help="Source(s) to process. Can be one or more images or directories containing images.",
                            type=str,
                            action='store',
                            nargs='+')
        
        parser.add_argument("-o", "--output",
                            help="Output directory. If not specified, the current directory will be used.",
                            required=False)
        
        parser.add_argument("-w", "--overwrite",
                            action="store_true",
                            help="Overwrite existing output files.",
                            required=False)
        
        parser.add_argument("-p", "--profile",
                            help="Optional override to specify a custom rawtherapee pp3 profile to use.\n"
                                "If none, the default config file will be used.",
                            required=False)
        
        parser.add_argument("-ca", "--aberration",
                            help="Remove chromatic aberration (rawtherapee only)\n",
                            action="store_true",
                            required=False)
        
        parser.add_argument("-r", "--resize",
                            help="Apply a resize to the output image. Aspect ratio is not preserved if both width and height are specified.\n"
                                "<width>x<height>.\n"
                                "(ML 1x3) 1920x2348 -> 5760x2348 -> 3840x1565 -> 2880x1174\n"
                                "(ML 1x3 2.35) - 1808x2300 -> (unsqueeze) 5424x2300 -> (0.5) 2712x1150\n"
                                "Or 1280x2160 (1x3) -> 3840x2160 -> 2560x1440 -> 1920x1080\n"
                                "Or preserve aspect ratio if w or h = 0: e.g. \"1920x0\"\n"
                                "Can also be a percentage like \"50%%\"",
                            required=False)
        
        parser.add_argument("-e", "--exposure",
                            type=float,
                            help="Raw to scene-linear exposure adjustment. Default is 4.0",
                            required=False)
        
        parser.add_argument("-f", "--filter",
                            help="Include only files that match regex. \n"
                                 "Can be comma separated list.",
                            required=False)

        
        # Show help if no args.
        if len(sys.argv)==1:
            parser.print_help()
            return None

        # All recognized file extensions
        self.raw_formats = RAW_FILE_FORMATS + [r.upper() for r in RAW_FILE_FORMATS]
        
        # list to hold inputs which are directories
        self.input_dirs = list()
        # list to hold raw images to process
        self.raw_images = list()

        args = parser.parse_args()

        # Validate bin paths
        self.rt_bin = RT_BIN
        self.dcraw_bin = DCRAW_BIN
        if USE_DCRAW:
            if not os.path.exists(self.dcraw_bin):
                log.error("Error: could not locate dcraw_emu")
                return
        else:
            if not os.path.exists(self.rt_bin):
                log.error("Error: could not locate rawtherapee-cli")
                return
        self.oiio_bin = OIIO_BIN
        if not os.path.exists(self.oiio_bin):
            log.error("Error: could not locate oiiotool")
            return


        # RawTherapee Profile
        self.profile = args.profile
        if self.profile:
            self.profile = os.path.expanduser(self.profile)
            self.profile = os.path.realpath(self.profile)
        else:
            self.profile = RT_DEFAULT_PROFILE
        if not os.path.isfile(self.profile):
            log.error("Error: Specified rawtherapee profile does not exist.")
            return
        
        # Create temp directory
        self.tmp_dir = CACHE_DIR
        if not os.path.isdir(self.tmp_dir):
            os.makedirs(self.tmp_dir)
        log.info(self.tmp_dir)

        # Search filter String
        if args.filter:
            if "," in args.filter:
                filter_items = [i.strip for i in args.filter.rsplit(',')]
            else:
                filter_items = [args.filter.strip()]
        else:
            filter_items = list()
        
        self.filter_patterns = list()
        if filter_items:
            for pattern in filter_items:
                self.filter_patterns.append(re.compile(pattern))

        # Gather input paths
        if args.input_paths:
            for input_path in args.input_paths:
                # Support ~ and relative paths
                input_path = os.path.expanduser(input_path)
                input_path = os.path.realpath(input_path)
                if os.path.isdir(input_path):
                    self.input_dirs.append(input_path)
                elif os.path.isfile(input_path):
                    self.add_file(input_path)
        if not self.raw_images and not self.input_dirs:
            log.error('Error: No inputs specified.')
            return

        # Output directory
        if args.output:
            self.dst = args.output
            self.dst = os.path.expanduser(self.dst)
            self.dst = os.path.realpath(self.dst)
            if not os.path.isdir(self.dst):
                os.makedirs(self.dst)
        else:
            self.dst = os.getcwd()
    
        # Chromatic aberration 
        self.aberration = args.aberration
        if self.aberration:
            # Copy pp3 profile to temp dir
            tmp_profile = os.path.join(self.tmp_dir, os.path.basename(self.profile))
            log.debug("Chromatic Aberration specified: Creating temp profile: {0}".format(tmp_profile))
            shutil.copyfile(self.profile, tmp_profile)
            sed_proc = subprocess.Popen(shlex.split("sed -i -e 's/CA=false/CA=true/' {0}".format(tmp_profile)))
            result, error = sed_proc.communicate()
            if not error:
                self.profile = tmp_profile


        
        self.overwrite = args.overwrite

        self.resize = args.resize

        self.resize_filter = RESIZE_FILTER
        self.compression = EXR_COMPRESSION
        self.exposure = args.exposure
        if not self.exposure:
            self.exposure = DEFAULT_EXPOSURE

        # process all raw images in input
        self.raw_images.sort()
        for image in self.raw_images:
            self.process_image(image, self.dst)

        # Process input_dirs
        for input_dir in self.input_dirs:
            self.raw_images = list()
            
            # Gather all raw images in input_dirs
            for root, directories, filenames in os.walk(input_dir):
                for filename in filenames:
                    fpath = os.path.join(root, filename)
                    self.add_file(fpath)
            
            self.raw_images.sort()
            for imgpath in self.raw_images:
                start_time = time.time()
                # All directories below input_dir will be reconstructed in out_dir
                out_subdir = imgpath.split(input_dir)[-1]
                if out_subdir.startswith(os.path.sep):
                    out_subdir = out_subdir[1:]
                out_dir = os.path.join(self.dst, out_subdir)
                out_dir = os.path.dirname(out_dir)
                
                self.process_image(imgpath, out_dir)

                elapsed_time = datetime.timedelta(seconds = time.time() - start_time)
                log.info("time: \t{0}".format(elapsed_time))



    def add_file(self, fpath):
        ''' Validate that input path is a valid raw image, apply filter rules
            :param fpath: string of file path to validate.
        ''' 
        if os.path.isfile(fpath):
            if "." in fpath:
                fpath_ext = fpath.split('.')[-1]
            if fpath_ext in self.raw_formats:
                # filter based on filter_list if it exists
                if self.filter_patterns:
                    log.debug("Checking for pattern in {0}".format(fpath))
                    for pattern in self.filter_patterns:
                        match = pattern.search(fpath)
                        if match:
                            log.debug("Match: {0}".format(match.group()))
                            if fpath not in self.raw_images:
                                self.raw_images.append(fpath)
                else:
                    if fpath not in self.raw_images:
                        self.raw_images.append(fpath)



    def process_image(self, imgpath, dstdir):
        ''' Debayer and convert to exr target input image path
            :param imgpath: string - raw image path to process
            :param dstdir: string - destination directory to process into
        '''
        log.info('Processing:\n\t{0}'.format(imgpath))

        img_dir, img_name = os.path.split(imgpath)
        img_basename, img_ext = os.path.splitext(img_name)

        tmp_dstpath = os.path.join(self.tmp_dir, img_basename + '.tif')
        
        if not os.path.isdir(dstdir):
            os.makedirs(dstdir)
        dstpath = os.path.join(dstdir, img_basename + '.exr')

        if not self.overwrite:
            # check if output file exists already
            if os.path.exists(dstpath):
                log.error('Skipping existing output image:\n\t{0}'.format(dstpath))
                return

        if USE_DCRAW:
            # dcraw_emu debayer
            dcraw_cmd = '"{0}" -4 -T -q 11 -w -o 6 -H 0 -Z - "{1}"'.format(
                self.dcraw_bin,
                imgpath,
                )
            with open(tmp_dstpath, "w") as output_file:
                dcraw_proc = subprocess.Popen(shlex.split(dcraw_cmd), stdout=output_file)
            result, error = dcraw_proc.communicate()
            if error:
                log.error("Error Processing Result: " + error)

        else:
            # rawtherapee debayer 
            rt_cmd = '{0} -o "{1}" -p "{2}" -b16 -Y -q -f -t -c "{3}"'.format(
                self.rt_bin,
                self.tmp_dir,
                self.profile,
                imgpath,
            )

            # log.info(rt_cmd)
            rt_proc = subprocess.Popen(
                shlex.split(rt_cmd), stdin=subprocess.PIPE, stdout=subprocess.PIPE)
            result, error = rt_proc.communicate()
            if error:
                log.error("Error Processing Result: " + error)
        
        if not os.path.isfile(tmp_dstpath):
            log.error("Output file did not generate:\n\t{0}".format(tmp_dstpath))

        # oiiotool convert tiff to exr
        oiio_cmd = '"{0}" -v "{1}"'.format(self.oiio_bin, tmp_dstpath)
        
        if self.resize:
            oiio_cmd += ' --resize {0}:filter={1}'.format(self.resize, self.resize_filter)
        
        oiio_cmd += ' -d half'
        oiio_cmd += ' --mulc {0}'.format(self.exposure)
        if USE_MATRIX:
            oiio_cmd += ' -ccmatrix:transpose=1 {0}'.format(OIIO_MATRIX)
        oiio_cmd += ' --compression {0}'.format(self.compression)
        oiio_cmd += ' -o {0}'.format(dstpath)

        # log.info(oiio_cmd)
        oiio_proc = subprocess.Popen(
            shlex.split(oiio_cmd),
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE)
        result, error = oiio_proc.communicate()
        
        # delete temp tif image
        os.remove(tmp_dstpath)
        log.info('\t{0}'.format(dstpath))
        return
    

if __name__=="__main__":
    debayer = Debayer()
